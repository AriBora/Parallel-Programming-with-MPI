# -*- coding: utf-8 -*-
"""plot_script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8DIuWSELdk8PHppi053c-zHn3LCLoz_
"""

import matplotlib.pyplot as plt
import pandas as pd

# Data provided
data = {
    8: [
        (0.109756, 0.006966, 0.116712),
        (0.044191, 0.006468, 0.050655),
        (0.162928, 0.006525, 0.169452),
        (0.166056, 0.006481, 0.172537),
        (0.164951, 0.006523, 0.171470),
    ],
    16: [
        (0.202934, 0.004219, 0.207134),
        (0.358937, 0.003603, 0.362531),
        (0.364957, 0.003616, 0.368566),
        (0.364329, 0.003611, 0.367925),
        (0.314542, 0.003714, 0.318245),
    ],
    32: [
        (0.683278, 0.002096, 0.685373),
        (0.493084, 0.002229, 0.495307),
        (0.448918, 0.002244, 0.451140),
        (0.638090, 0.002114, 0.640192),
        (0.448144, 0.002399, 0.450518),
    ],
    64: [
        (1.410070, 0.001461, 1.411363),
        (1.504192, 0.001415, 1.505575),
        (1.482704, 0.001318, 1.483973),
        (1.461268, 0.001315, 1.462538),
        (1.545580, 0.001295, 1.546817),
    ]
}


# Organize data for plotting
read_times = [ [run[0] for run in data[proc]] for proc in data ]
comp_times = [ [run[1] for run in data[proc]] for proc in data ]
total_times = [ [run[2] for run in data[proc]] for proc in data ]
labels = list(data.keys())

plt.figure()
plt.boxplot(read_times, labels=labels)
plt.title("Read Time vs Number of Processes")
plt.xlabel("Processes")
plt.ylabel("Read Time (s)")
plt.savefig("readtime.png")

plt.figure()
plt.boxplot(comp_times, labels=labels)
plt.title("Computation Time vs Number of Processes")
plt.xlabel("Processes")
plt.ylabel("Computation Time (s)")
plt.savefig("comptime.png")

plt.figure()
plt.boxplot(total_times, labels=labels)
plt.title("Total Time vs Number of Processes")
plt.xlabel("Processes")
plt.ylabel("Total Time (s)")
plt.savefig("totaltime.png")

data1 = {
    8: {
        'Approach 1': [0.155584, 0.180878, 0.163952],
        'Approach 2': [0.165643, 0.172866, 0.155941],
        'Approach 3': [0.024425, 0.166732, 0.138290] ,
    },
    32: {
        'Approach 1': [0.612318, 0.635000, 0.645023],
        'Approach 2': [0.654721, 0.634714, 0.638832],
        'Approach 3': [0.581682, 0.592488, 0.621571],
    }
}

# Prepare data for plotting
approaches = ['Approach 1', 'Approach 2', 'Approach 3']
processes = [8, 32]

fig, ax = plt.subplots(figsize=(10, 6))

positions = []
box_data = []
tick_labels = []

position_counter = 1
for proc in processes:
    for i, approach in enumerate(approaches):
        box_data.append(data1[proc][approach])
        positions.append(position_counter + i)
        tick_labels.append(f'{approach}\n({proc} procs)')
    position_counter += 4  # Leave space between process groups

# Boxplot
bp = ax.boxplot(box_data, positions=positions, patch_artist=True)

# Custom colors
colors = ['lightblue', 'lightgreen', 'salmon']
for patch, color in zip(bp['boxes'], colors * len(processes)):
    patch.set_facecolor(color)

ax.set_xticks(positions)
ax.set_xticklabels(tick_labels)
ax.set_ylabel('Execution Time (s)')
ax.set_title('Boxplot of Execution Time for Different Approaches')
ax.grid(True, linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()

